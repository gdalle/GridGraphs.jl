var documenterSearchIndex = {"docs":
[{"location":"api/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"api/#Docs","page":"API reference","title":"Docs","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [GridGraphs]","category":"page"},{"location":"api/#GridGraphs.GridGraphs","page":"API reference","title":"GridGraphs.GridGraphs","text":"GridGraphs\n\nA package for graphs defined by a grid of vertices.\n\n\n\n\n\n","category":"module"},{"location":"api/#GridGraphs.GridDirection","page":"API reference","title":"GridGraphs.GridDirection","text":"GridDirection\n\nEnum type for the 9 possible move directions on a 2-dimensional grid with square cells: northwest, west, southwest, north, center, south, northeast, east, southeast.\n\nVarious subsets of these directions are defined as constants, but not exported. They are based on an analogy with the game of chess:\n\nQUEEN_DIRECTIONS_PLUS_CENTER\nROOK_DIRECTIONS_PLUS_CENTER\nQUEEN_DIRECTIONS\nROOK_DIRECTIONS\nQUEEN_ACYCLIC_DIRECTIONS\nROOK_ACYCLIC_DIRECTIONS\n\nAcyclic direction sets give rise to an acyclic graph because they are contained in {south, east, southeast}.\n\n\n\n\n\n","category":"type"},{"location":"api/#GridGraphs.GridGraph","page":"API reference","title":"GridGraphs.GridGraph","text":"GridGraph{\n    T<:Integer,\n    R<:Real,\n    W<:AbstractMatrix{R},\n    A<:AbstractMatrix{Bool}\n}\n\nGraph defined by a grid of vertices with index type T.\n\nFields\n\nweights::W: vertex weights matrix, which serve to define edge weights.\nactive::A: vertex activity matrix. All the vertices on the grid exist, but only active vertices can have edges (inactive vertices are isolated).\ndirections::Vector{GridDirection}: the set of legal directions which are used to define edges.\ndiag_through_corner::Bool: defines how the weight of a diagonal edge is computed.\n\nSee also\n\nedge_weight(g, s, d)\n\n\n\n\n\n","category":"type"},{"location":"api/#GridGraphs.GridGraph-Union{Tuple{Any}, Tuple{T}} where T","page":"API reference","title":"GridGraphs.GridGraph","text":"GridGraph{T}(weights[; active, directions, diag_through_corner])\n\nUser-friendly constructor. By default, all vertices are active, all directions are allowed, and edge weights are always computed based on the arrival vertex alone.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.ShortestPathTree","page":"API reference","title":"GridGraphs.ShortestPathTree","text":"ShortestPathTree{T<:Integer,R<:Real}\n\nStorage for the result of a single-source shortest paths query with source s.\n\nFields\n\nparents::Vector{T}: the parent of each vertex v in a shortest s -> v path.\ndists::Vector{R}: the distance of each vertex v from s.\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.:+-Union{Tuple{T}, Tuple{Tuple{T, T}, GridDirection}} where T","page":"API reference","title":"Base.:+","text":"Base.+((i, j), dir)\n\nAdd a GridDirection to a couple of grid coordinates and return the new coordinates.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.:--Tuple{GridDirection}","page":"API reference","title":"Base.:-","text":"Base.-(dir)\n\nCompute the opposite GridDirection (e.g. northwest / southeast).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.:--Union{Tuple{T}, Tuple{Tuple{T, T}, GridDirection}} where T","page":"API reference","title":"Base.:-","text":"Base.-((i, j), dir)\n\nSubtract a GridDirection from a couple of grid coordinates and return the new coordinates.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.show-Union{Tuple{A}, Tuple{W}, Tuple{R}, Tuple{T}, Tuple{IO, GridGraph{T, R, W, A}}} where {T, R, W, A}","page":"API reference","title":"Base.show","text":"Base.show(io, g)\n\nDisplay a GridGraph using braille patterns when not all vertices are active.\n\n\n\n\n\n","category":"method"},{"location":"api/#Graphs.weights-Tuple{GridGraph}","page":"API reference","title":"Graphs.weights","text":"Graphs.weights(g)\n\nEfficiently compute a sparse matrix of edge weights based on the vertex weights.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.active_vertex-Tuple{GridGraph, Any}","page":"API reference","title":"GridGraphs.active_vertex","text":"active_vertex(g, v)\n\nCheck if vertex v is active.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.coord_to_index-Union{Tuple{T}, Tuple{GridGraph{T, R} where R<:Real, Any, Any}} where T","page":"API reference","title":"GridGraphs.coord_to_index","text":"coord_to_index(g, i, j)\n\nConvert a grid coordinate tuple (i,j) into the index v of the associated vertex.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.diag_through_corner-Tuple{GridGraph}","page":"API reference","title":"GridGraphs.diag_through_corner","text":"diag_through_corner(g)\n\nCheck if diagonal edge weights are computed using the corner vertices.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.edge_weight-Tuple{GridGraph, Any, Any}","page":"API reference","title":"GridGraphs.edge_weight","text":"edge_weight(g, s, d)\n\nCompute the weight of the edge from s to d.\n\nIf diag_through_corner(g) is false, return the vertex weight of the destination d\nIf diag_through_corner(g) is true, use Pythagoras' theorem on the cheapest of the two corner vertices.\n\nSee also\n\nedge_weight_direct(g, s, d)\nedge_weight_corner(g, s, d)\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.edge_weight_corner-Union{Tuple{R}, Tuple{T}, Tuple{GridGraph{T, R, W} where W<:AbstractMatrix{R}, Any, Any}} where {T, R}","page":"API reference","title":"GridGraphs.edge_weight_corner","text":"edge_weight_corner(g, s, d)\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.edge_weight_direct-Tuple{GridGraph, Any, Any}","page":"API reference","title":"GridGraphs.edge_weight_direct","text":"edge_weight_direct(g, s, d)\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.get_direction-Union{Tuple{T}, Tuple{T, T}} where T","page":"API reference","title":"GridGraphs.get_direction","text":"get_direction(Δi, Δj)\n\nTranslate a couple of grid steps in {±1,0} into a GridDirection.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.get_path-Union{Tuple{T}, Tuple{GridGraphs.ShortestPathTree{T}, Integer, Integer}} where T","page":"API reference","title":"GridGraphs.get_path","text":"get_path(spt::ShortestPathTree, s, d)\n\nReconstruct the shortest s -> d path from a ShortestPathTree with source s.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.get_tuple-Union{Tuple{T}, Tuple{Type{T}, GridDirection}} where T","page":"API reference","title":"GridGraphs.get_tuple","text":"get_tuple(::Type{T}, dir)\n\nTranslate a GridDirection into a couple of grid steps in {±1,0} with integer type T.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.grid_bellman_ford-Tuple{GridGraph, Integer, Integer}","page":"API reference","title":"GridGraphs.grid_bellman_ford","text":"grid_bellman_ford(g, s, d)\n\nApply grid_bellman_ford(g, s) and retrieve the shortest path from s to d.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.grid_bellman_ford-Union{Tuple{R}, Tuple{T}, Tuple{GridGraph{T, R, W} where W<:AbstractMatrix{R}, Integer}} where {T, R}","page":"API reference","title":"GridGraphs.grid_bellman_ford","text":"grid_bellman_ford(g, s)\n\nApply the Bellman-Ford algorithm on an GridGraph g, and return a ShortestPathTree with source s.\n\nCompatible with ForwardDiff.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.grid_dijkstra-Tuple{GridGraph, Integer, Integer}","page":"API reference","title":"GridGraphs.grid_dijkstra","text":"grid_dijkstra(g, s, d)\n\nApply grid_dijkstra(g, s) and retrieve the shortest path from s to d.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.grid_dijkstra-Union{Tuple{R}, Tuple{T}, Tuple{GridGraph{T, R, W} where W<:AbstractMatrix{R}, Integer}} where {T, R}","page":"API reference","title":"GridGraphs.grid_dijkstra","text":"grid_dijkstra(g, s)\n\nApply Dijkstra's algorithm on an GridGraph g, and return a ShortestPathTree with source s.\n\nUses a DataStructures.BinaryHeap internally instead of a DataStructures.PriorityQueue. Compatible with ForwardDiff.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.grid_topological_sort-Tuple{GridGraph, Integer, Integer}","page":"API reference","title":"GridGraphs.grid_topological_sort","text":"grid_topological_sort(g, s, d)\n\nApply grid_topological_sort(g, s) and retrieve the shortest path from s to d.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.grid_topological_sort-Union{Tuple{R}, Tuple{T}, Tuple{GridGraph{T, R, W} where W<:AbstractMatrix{R}, Integer}} where {T, R}","page":"API reference","title":"GridGraphs.grid_topological_sort","text":"grid_topological_sort(g, s)\n\nApply the topological sort on an acyclic GridGraph g, and return a ShortestPathTree with source s.\n\nAssumes vertex indices correspond to topological ranks. Compatible with ForwardDiff.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.has_direction-Tuple{GridGraph, GridDirection}","page":"API reference","title":"GridGraphs.has_direction","text":"has_direction(g, dir)\n\nCheck if direction dir is a valid edge direction.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.has_negative_weights-Union{Tuple{GridGraph{T, R, W} where W<:AbstractMatrix{R}}, Tuple{R}, Tuple{T}} where {T, R}","page":"API reference","title":"GridGraphs.has_negative_weights","text":"has_negative_weights(g)\n\nCheck if any of the vertex weights are negative.\n\nBy default this check is not included in Dijkstra's algorithm to save time.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.height-Union{Tuple{GridGraph{T, R} where R<:Real}, Tuple{T}} where T","page":"API reference","title":"GridGraphs.height","text":"height(g)\n\nCompute the height of the grid (number of rows).\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.index_to_coord-Union{Tuple{T}, Tuple{GridGraph{T, R} where R<:Real, Any}} where T","page":"API reference","title":"GridGraphs.index_to_coord","text":"index_to_coord(g, v)\n\nConvert a vertex index v into the tuple (i,j) of associated grid coordinates.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.is_acyclic-Tuple{AbstractVector{GridDirection}}","page":"API reference","title":"GridGraphs.is_acyclic","text":"is_acyclic(directions)\n\nCheck if a set of directions is contained in {south, east, southeast}.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.path_to_matrix-Tuple{GridGraph, Vector{<:Integer}}","page":"API reference","title":"GridGraphs.path_to_matrix","text":"path_to_matrix(g::GridGraph, path::Vector{<:Integer})\n\nStore the shortest s -> d path in g as an integer matrix of size height(g) * width(g), where entry (i,j) counts the number of visits to the associated vertex.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.vertex_weight-Tuple{GridGraph, Any}","page":"API reference","title":"GridGraphs.vertex_weight","text":"vertex_weight(g, v)\n\nRetrieve the vertex weight associated with index v.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridGraphs.width-Union{Tuple{GridGraph{T, R} where R<:Real}, Tuple{T}} where T","page":"API reference","title":"GridGraphs.width","text":"width(g)\n\nCompute the width of the grid (number of columns).\n\n\n\n\n\n","category":"method"},{"location":"api/#Index","page":"API reference","title":"Index","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = GridGraphs","category":"page"},{"location":"#GridGraphs.jl","page":"Home","title":"GridGraphs.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for GridGraphs, a package made for efficient analysis of 2-dimensional grid graphs.","category":"page"}]
}
