var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GridGraphs","category":"page"},{"location":"#GridGraphs.jl","page":"Home","title":"GridGraphs.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for GridGraphs, a package made for efficient analysis of rectangular grid graphs.","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Docstrings","page":"Home","title":"Docstrings","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [GridGraphs]","category":"page"},{"location":"#GridGraphs.FullGridGraph","page":"Home","title":"GridGraphs.FullGridGraph","text":"FullGridGraph\n\nConcrete subtype of GridGraph for which all vertices are active.\n\n\n\n\n\n","category":"type"},{"location":"#GridGraphs.GridGraph","page":"Home","title":"GridGraphs.GridGraph","text":"GridGraph{T<:Integer,R<:Real,W<:AbstractMatrix{R},A<:AbstractMatrix{Bool},mt,md,mc}\n\nAbstract supertype for graphs defined by a grid of vertices.\n\nRequired fields\n\nweights::W: vertex weights matrix. The weight of an edge is a simple function of a few vertex weights, depending on the type of grid.\nactive::A: vertex activity matrix. All the vertices on the grid exist, but only some are active (i.e. can have edges with their neighbors).\n\nType parameters\n\nT: type of vertex indices\nR: type of edge weights\nW: type of vertex weights matrix\nA: type of vertex activity matrix\nmt::MoveType\nmd::MoveDirection\nmc::MoveCost\n\n\n\n\n\n","category":"type"},{"location":"#GridGraphs.MoveCost","page":"Home","title":"GridGraphs.MoveCost","text":"MoveCost\n\nEnum type with possible values direct (the edge weight is the weight of the destination) or corner (the edge weight follows Pythagoras' theorem).\n\n\n\n\n\n","category":"type"},{"location":"#GridGraphs.MoveDirection","page":"Home","title":"GridGraphs.MoveDirection","text":"MoveDirection\n\nEnum type with possible values cyclic (all possible directions) or acyclic (only down and right).\n\n\n\n\n\n","category":"type"},{"location":"#GridGraphs.MoveType","page":"Home","title":"GridGraphs.MoveType","text":"MoveType\n\nEnum type with possible values rook (4 neighbors) or queen (8 neighbors).\n\n\n\n\n\n","category":"type"},{"location":"#GridGraphs.ShortestPathTree","page":"Home","title":"GridGraphs.ShortestPathTree","text":"ShortestPathTree{T<:Integer,R<:Real}\n\nStorage for the result of a single-source shortest paths query with source s.\n\nFields\n\nparents::Vector{T}: the parent of each vertex v in a shortest s -> v path.\ndists::Vector{R}: the distance of each vertex v from s.\n\n\n\n\n\n","category":"type"},{"location":"#GridGraphs.SparseGridGraph","page":"Home","title":"GridGraphs.SparseGridGraph","text":"FullGridGraph\n\nConcrete subtype of GridGraph for which only some vertices are active.\n\n\n\n\n\n","category":"type"},{"location":"#Graphs.weights-Union{Tuple{GridGraph{T, R, W} where W<:AbstractMatrix{R}}, Tuple{R}, Tuple{T}} where {T, R}","page":"Home","title":"Graphs.weights","text":"Graphs.weights(g)\n\nCompute a sparse matrix of edge weights based on the vertex weights.\n\n\n\n\n\n","category":"method"},{"location":"#GridGraphs.coord_to_index-Union{Tuple{T}, Tuple{GridGraph{T, R} where R<:Real, Integer, Integer}} where T","page":"Home","title":"GridGraphs.coord_to_index","text":"coord_to_index(g, i, j)\n\nConvert a grid coordinate tuple (i,j) into the index v of the associated vertex.\n\n\n\n\n\n","category":"method"},{"location":"#GridGraphs.get_path-Union{Tuple{T}, Tuple{GridGraphs.ShortestPathTree{T}, Integer, Integer}} where T","page":"Home","title":"GridGraphs.get_path","text":"get_path(spt::ShortestPathTree, s, d)\n\nReconstruct the shortest s -> d path from a ShortestPathTree with source s.\n\n\n\n\n\n","category":"method"},{"location":"#GridGraphs.grid_bellman_ford-Tuple{GridGraph, Integer, Integer}","page":"Home","title":"GridGraphs.grid_bellman_ford","text":"grid_bellman_ford(g, s, d)\n\nApply grid_bellman_ford(g, s) and retrieve the shortest path from s to d.\n\n\n\n\n\n","category":"method"},{"location":"#GridGraphs.grid_bellman_ford-Union{Tuple{R}, Tuple{T}, Tuple{GridGraph{T, R, W} where W<:AbstractMatrix{R}, Integer}} where {T, R}","page":"Home","title":"GridGraphs.grid_bellman_ford","text":"grid_bellman_ford(g, s)\n\nApply the Bellman-Ford algorithm on an GridGraph g, and return a ShortestPathTree with source s.\n\n\n\n\n\n","category":"method"},{"location":"#GridGraphs.grid_dijkstra-Tuple{GridGraph, Integer, Integer}","page":"Home","title":"GridGraphs.grid_dijkstra","text":"grid_dijkstra(g, s, d)\n\nApply grid_dijkstra(g, s) and retrieve the shortest path from s to d.\n\n\n\n\n\n","category":"method"},{"location":"#GridGraphs.grid_dijkstra-Union{Tuple{R}, Tuple{T}, Tuple{GridGraph{T, R, W} where W<:AbstractMatrix{R}, Integer}} where {T, R}","page":"Home","title":"GridGraphs.grid_dijkstra","text":"grid_dijkstra(g, s)\n\nApply Dijkstra's algorithm on an GridGraph g, and return a ShortestPathTree with source s.\n\nUses a DataStructures.BinaryHeap internally instead of a DataStructures.PriorityQueue.\n\n\n\n\n\n","category":"method"},{"location":"#GridGraphs.grid_topological_sort-Tuple{GridGraph, Integer, Integer}","page":"Home","title":"GridGraphs.grid_topological_sort","text":"grid_topological_sort(g, s, d)\n\nApply grid_topological_sort(g, s) and retrieve the shortest path from s to d.\n\n\n\n\n\n","category":"method"},{"location":"#GridGraphs.grid_topological_sort-Union{Tuple{R}, Tuple{T}, Tuple{GridGraph{T, R, W} where W<:AbstractMatrix{R}, Integer}} where {T, R}","page":"Home","title":"GridGraphs.grid_topological_sort","text":"grid_topological_sort(g, s)\n\nApply the topological sort on an acyclic GridGraph g, and return a ShortestPathTree with source s.\n\nAssumes vertex indices correspond to topological ranks.\n\n\n\n\n\n","category":"method"},{"location":"#GridGraphs.has_negative_weights-Union{Tuple{GridGraph{T, R, W} where W<:AbstractMatrix{R}}, Tuple{R}, Tuple{T}} where {T, R}","page":"Home","title":"GridGraphs.has_negative_weights","text":"has_negative_weights(g)\n\nCheck whether there are any negative weights.\n\n\n\n\n\n","category":"method"},{"location":"#GridGraphs.height-Union{Tuple{GridGraph{T, R} where R<:Real}, Tuple{T}} where T","page":"Home","title":"GridGraphs.height","text":"height(g)\n\nCompute the height of the grid (number of rows).\n\n\n\n\n\n","category":"method"},{"location":"#GridGraphs.index_to_coord-Union{Tuple{T}, Tuple{GridGraph{T, R} where R<:Real, Integer}} where T","page":"Home","title":"GridGraphs.index_to_coord","text":"index_to_coord(g, v)\n\nConvert a vertex index v into the tuple (i,j) of associated grid coordinates.\n\n\n\n\n\n","category":"method"},{"location":"#GridGraphs.inneighbors_coord","page":"Home","title":"GridGraphs.inneighbors_coord","text":"inneighbors_coord(g, i, j)\n\nReturn the inneighbors of (i, j) listed in ascending index order.\n\n\n\n\n\n","category":"function"},{"location":"#GridGraphs.outneighbors_coord","page":"Home","title":"GridGraphs.outneighbors_coord","text":"outneighbors_coord(g, i, j)\n\nReturn the outneighbors of (i, j) listed in ascending index order.\n\n\n\n\n\n","category":"function"},{"location":"#GridGraphs.path_to_matrix-Tuple{GridGraph, Vector{<:Integer}}","page":"Home","title":"GridGraphs.path_to_matrix","text":"path_to_matrix(g::GridGraph, path::Vector{<:Integer})\n\nStore the shortest s -> d path in g as an integer matrix of size height(g) * width(g), where entry (i,j) counts the number of visits to the associated vertex.\n\n\n\n\n\n","category":"method"},{"location":"#GridGraphs.vertex_weight-Tuple{GridGraph, Integer}","page":"Home","title":"GridGraphs.vertex_weight","text":"vertex_weight(g, v)\n\nRetrieve the vertex weight associated with index v.\n\n\n\n\n\n","category":"method"},{"location":"#GridGraphs.vertex_weight_coord-Tuple{GridGraph, Integer, Integer}","page":"Home","title":"GridGraphs.vertex_weight_coord","text":"vertex_weight_coord(g, i, j)\n\nRetrieve the vertex weight associated with coordinates (i, j).\n\n\n\n\n\n","category":"method"},{"location":"#GridGraphs.width-Union{Tuple{GridGraph{T, R} where R<:Real}, Tuple{T}} where T","page":"Home","title":"GridGraphs.width","text":"width(g)\n\nCompute the width of the grid (number of columns).\n\n\n\n\n\n","category":"method"}]
}
