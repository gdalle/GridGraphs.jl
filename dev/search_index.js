var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GridGraphs","category":"page"},{"location":"#GridGraphs.jl","page":"Home","title":"GridGraphs.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GridGraphs","category":"page"},{"location":"#GridGraphs.GridGraphs","page":"Home","title":"GridGraphs.GridGraphs","text":"GridGraphs\n\nA package for graphs defined by a rectangular grid of vertices.\n\nGitHub repo: https://github.com/gdalle/GridGraphs.jl\n\n\n\n\n\n","category":"module"},{"location":"#API-reference","page":"Home","title":"API reference","text":"","category":"section"},{"location":"#Types","page":"Home","title":"Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GridDirection\nGridGraph","category":"page"},{"location":"#GridGraphs.GridDirection","page":"Home","title":"GridGraphs.GridDirection","text":"GridDirection\n\nEnum type for the 9 possible move directions on a 2-dimensional grid with square cells: northwest, west, southwest, north, center, south, northeast, east, southeast.\n\nVarious subsets of these directions are defined as constants. They are based on an analogy with the game of chess:\n\nQUEEN_DIRECTIONS\nROOK_DIRECTIONS\nQUEEN_DIRECTIONS_PLUS_CENTER\nROOK_DIRECTIONS_PLUS_CENTER\nQUEEN_DIRECTIONS_ACYCLIC\nROOK_DIRECTIONS_ACYCLIC\n\nAcyclic direction sets give rise to an acyclic graph because they are contained in {south, east, southeast}.\n\n\n\n\n\n","category":"type"},{"location":"#GridGraphs.GridGraph","page":"Home","title":"GridGraphs.GridGraph","text":"GridGraph{\n    R<:Real,\n    W<:AbstractMatrix{R},\n    A<:AbstractMatrix{Bool},\n    D<:NTuple{<:Any,GridDirection}\n}\n\nGraph defined by a rectangular grid of vertices.\n\nFields\n\nvertex_weights::W: Vertex weight matrix used to define edge weights.\nvertex_activities::A: Vertex activity matrix. All the vertices on the grid exist, but only active vertices can have edges (inactive vertices are isolated, they correspond to obstacles).\ndirections::D: Set of legal directions used to define edges.\nnb_corners_for_diag::Int: Number of active corner vertices necessary for a diagonal edge to exist. Can take the values 0, 1 or 2.\npythagoras_cost_for_diag::Bool: Whether the weight of a diagonal edge is computed using the shortest of the active corner paths (true) or just the weight of the arrival vertex (false).\n\nConstructors\n\nThere is a user-friendly constructor with the following default values:\n\nGridGraph(\n    vertex_weights;\n    vertex_activities=Trues(size(weights)),\n    directions=ROOK_DIRECTIONS,\n    nb_corners_for_diag=0,\n    pythagoras_cost_for_diag=false\n)\n\n\n\n\n\n","category":"type"},{"location":"#Access","page":"Home","title":"Access","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"get_tuple\nget_direction\nheight\nwidth\nindex_to_coord\ncoord_to_index\nvertex_active\nhas_direction\nvertex_weight\nedge_weight","category":"page"},{"location":"#GridGraphs.get_tuple","page":"Home","title":"GridGraphs.get_tuple","text":"get_tuple(dir)\n\nTranslate a GridDirection into a couple of grid steps in {±1,0}.\n\n\n\n\n\n","category":"function"},{"location":"#GridGraphs.get_direction","page":"Home","title":"GridGraphs.get_direction","text":"get_direction(Δi, Δj)\n\nTranslate a couple of grid steps in {±1,0} into a GridDirection.\n\n\n\n\n\n","category":"function"},{"location":"#GridGraphs.height","page":"Home","title":"GridGraphs.height","text":"height(g)\n\nCompute the height of the grid (number of rows).\n\n\n\n\n\n","category":"function"},{"location":"#GridGraphs.width","page":"Home","title":"GridGraphs.width","text":"width(g)\n\nCompute the width of the grid (number of columns).\n\n\n\n\n\n","category":"function"},{"location":"#GridGraphs.index_to_coord","page":"Home","title":"GridGraphs.index_to_coord","text":"index_to_coord(g, v)\n\nConvert a vertex index v into the tuple (i,j) of associated grid coordinates.\n\n\n\n\n\n","category":"function"},{"location":"#GridGraphs.coord_to_index","page":"Home","title":"GridGraphs.coord_to_index","text":"coord_to_index(g, i, j)\n\nConvert a grid coordinate tuple (i,j) into the index v of the associated vertex.\n\n\n\n\n\n","category":"function"},{"location":"#GridGraphs.vertex_active","page":"Home","title":"GridGraphs.vertex_active","text":"vertex_active(g, v)\n\nCheck if vertex v is active.\n\n\n\n\n\n","category":"function"},{"location":"#GridGraphs.has_direction","page":"Home","title":"GridGraphs.has_direction","text":"has_direction(g, dir)\n\nCheck if direction dir is a valid edge direction.\n\n\n\n\n\n","category":"function"},{"location":"#GridGraphs.vertex_weight","page":"Home","title":"GridGraphs.vertex_weight","text":"vertex_weight(g, v)\n\nRetrieve the vertex weight associated with index v.\n\n\n\n\n\n","category":"function"},{"location":"#GridGraphs.edge_weight","page":"Home","title":"GridGraphs.edge_weight","text":"edge_weight(g, s, d)\n\nCompute the weight of the edge from s to d.\n\nOnly use this on edges that are guaranteed to exist.\n\n\n\n\n\n","category":"function"},{"location":"#Shortest-paths","page":"Home","title":"Shortest paths","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"get_path\npath_to_matrix\ngrid_dijkstra\ngrid_bellman_ford\ngrid_topological_sort\nShortestPathTree","category":"page"},{"location":"#GridGraphs.get_path","page":"Home","title":"GridGraphs.get_path","text":"get_path(spt::ShortestPathTree, s, d)\n\nReconstruct the shortest s -> d path from a ShortestPathTree with source s.\n\n\n\n\n\n","category":"function"},{"location":"#GridGraphs.path_to_matrix","page":"Home","title":"GridGraphs.path_to_matrix","text":"path_to_matrix(g::GridGraph, path::Vector{<:Integer})\n\nStore the shortest s -> d path in g as an integer matrix of size height(g) * width(g), where entry (i,j) counts the number of visits to the associated vertex.\n\n\n\n\n\n","category":"function"},{"location":"#GridGraphs.grid_dijkstra","page":"Home","title":"GridGraphs.grid_dijkstra","text":"grid_dijkstra(g, s)\n\nApply Dijkstra's algorithm on an GridGraph g, and return a ShortestPathTree with source s.\n\nUses a DataStructures.BinaryHeap internally instead of a DataStructures.PriorityQueue. Compatible with ForwardDiff.\n\n\n\n\n\ngrid_dijkstra(g, s, d)\n\nApply grid_dijkstra(g, s) and retrieve the shortest path from s to d.\n\n\n\n\n\n","category":"function"},{"location":"#GridGraphs.grid_bellman_ford","page":"Home","title":"GridGraphs.grid_bellman_ford","text":"grid_bellman_ford(g, s)\n\nApply the Bellman-Ford algorithm on an GridGraph g, and return a ShortestPathTree with source s.\n\nCompatible with ForwardDiff.\n\n\n\n\n\ngrid_bellman_ford(g, s, d)\n\nApply grid_bellman_ford(g, s) and retrieve the shortest path from s to d.\n\n\n\n\n\n","category":"function"},{"location":"#GridGraphs.grid_topological_sort","page":"Home","title":"GridGraphs.grid_topological_sort","text":"grid_topological_sort(g, s)\n\nApply the topological sort on an acyclic GridGraph g, and return a ShortestPathTree with source s.\n\nAssumes vertex indices correspond to topological ranks. Compatible with ForwardDiff.\n\n\n\n\n\ngrid_topological_sort(g, s, d)\n\nApply grid_topological_sort(g, s) and retrieve the shortest path from s to d.\n\n\n\n\n\n","category":"function"},{"location":"#GridGraphs.ShortestPathTree","page":"Home","title":"GridGraphs.ShortestPathTree","text":"ShortestPathTree{R<:Real}\n\nStorage for the result of a single-source shortest paths query with source s.\n\nFields\n\nparents::Vector{Int}: the parent of each vertex v in a shortest s -> v path.\ndists::Vector{R}: the distance of each vertex v from s.\n\n\n\n\n\n","category":"type"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
